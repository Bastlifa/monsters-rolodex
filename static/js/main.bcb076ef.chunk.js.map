{"version":3,"sources":["components/Card/Card.jsx","components/CardList/CardList.jsx","components/SearchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","monster","react_default","a","createElement","className","src","concat","id","alt","name","email","CardList","monsters","map","Card_Card_Card","key","SearchBox","handleChange","placeHolder","type","placeholder","onChange","App","_useState","useState","_useState2","Object","slicedToArray","setMonsters","_useState3","_useState4","searchField","setSearchField","useEffect","_","console","log","axios","get","then","response","data","filteredMonsters","filter","toLowerCase","includes","SearchBox_SearchBox_SearchBox","e","target","value","CardList_CardList_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAEaA,SAAO,SAAAC,GACpB,IACWC,EAAWD,EAAXC,QACP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBACVH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAAQO,GAAlC,2BAA+DC,IAAI,YAC3EP,EAAAC,EAAAC,cAAA,UAAKH,EAAQS,MACbR,EAAAC,EAAAC,cAAA,SAAIH,EAAQU,UCJXC,SAAW,SAAAZ,GACxB,IACWa,EAAYb,EAAZa,SAEP,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAS,aACTQ,EAASC,IAAI,SAAAb,GAAO,OAAIC,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKf,EAAQO,GAAIP,QAASA,SCRxDgB,SAAY,SAAAjB,GACzB,IACWkB,EAA6BlB,EAA7BkB,aAAcC,EAAenB,EAAfmB,YAErB,OACIjB,EAAAC,EAAAC,cAAA,SACIC,UAAS,SACTe,KAAI,SACJC,YAAaF,EACbG,SAAUJ,+BC2BPK,MA/Bf,WAAe,IAAAC,EAEmBC,mBAAS,IAF5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAENX,EAFMa,EAAA,GAEIG,EAFJH,EAAA,GAAAI,EAGyBL,mBAAS,IAHlCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGNE,EAHMD,EAAA,GAGOE,EAHPF,EAAA,GAKbG,oBAAU,SAAAC,GAERC,QAAQC,IAAI,KACZC,IAAMC,IAAI,8CACTC,KAAK,SAAAC,GAEFZ,EAAYY,EAASC,SAExB,CAACV,IAEJ,IAAMW,EAAmB9B,EAAS+B,OAAO,SAAA3C,GAEvC,OAAOA,EAAQS,KAAKmC,cAAcC,SAASd,EAAYa,iBAKzD,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,sBACAH,EAAAC,EAAAC,cAAC2C,EAAD,CAAW7B,aALM,SAAA8B,GAAC,OAAIf,EAAee,EAAEC,OAAOC,QAKP/B,YAAW,oBAClDjB,EAAAC,EAAAC,cAAC+C,EAAD,CAAUtC,SAAU8B,MCtBNS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.bcb076ef.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.css'\r\nexport const Card = props =>\r\n{\r\n    const {monster} = props\r\n    return (\r\n        <div className={`card-container`}>\r\n            <img src={`https://robohash.org/${monster.id}/?set=set2&size=180x180`} alt='monster'/>\r\n            <h1>{monster.name}</h1>\r\n            <p>{monster.email}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {Card} from '../Card/Card'\r\n\r\nimport './CardList.css'\r\n\r\nexport const CardList = props =>\r\n{\r\n    const {monsters} = props\r\n\r\n    return (\r\n        <div className={`card-list`}>\r\n            {monsters.map(monster => <Card key={monster.id} monster={monster} />)}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './SearchBox.css'\r\n\r\nexport const SearchBox = props =>\r\n{\r\n    const {handleChange, placeHolder} = props\r\n\r\n    return (\r\n        <input \r\n            className={`search`}\r\n            type={`search`}\r\n            placeholder={placeHolder}\r\n            onChange={handleChange} \r\n        />\r\n    )\r\n\r\n}","import React, {useState, useEffect} from 'react';\nimport {CardList} from './components/CardList/CardList'\nimport {SearchBox} from './components/SearchBox/SearchBox'\n\nimport './App.css';\n\nimport axios from 'axios'\n\nfunction App() {\n  \n  const [monsters, setMonsters] = useState([])\n  const [searchField, setSearchField] = useState('');\n\n  useEffect(_ =>\n  {\n    console.log('a')\n    axios.get(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response =>\n      {\n        setMonsters(response.data)\n      })\n  }, [searchField])\n\n  const filteredMonsters = monsters.filter(monster => \n  {\n    return monster.name.toLowerCase().includes(searchField.toLowerCase())\n  })\n\n  const handleChange = e => setSearchField(e.target.value)\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"wonky-h1\"> Monsters Rolodex </h1>\n      <SearchBox handleChange={handleChange} placeHolder={`search monsters`}/>\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}